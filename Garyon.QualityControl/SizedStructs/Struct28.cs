using System.Runtime.InteropServices;
using Garyon.Attributes;
using System;

namespace Garyon.QualityControl.SizedStructs;

/// <summary>A struct with a size of 28 bytes.</summary>
[StructLayout(LayoutKind.Sequential, Size = elementCount)]
[Autogenerated]
public unsafe struct Struct28 : ISizedStruct<Struct28>
{
    private const int elementCount = 28;

    private fixed byte elements[elementCount];

    public static bool operator ==(Struct28 left, Struct28 right) => left.Equals(right);
    public static bool operator !=(Struct28 left, Struct28 right) => !(left == right);
    public static Struct28 operator ~(Struct28 s)
    {
        var result = new Struct28();
        for (int i = 0; i < elementCount; i++)
            result.elements[i] = (byte)~s.elements[i];
        return result;
    }

    public bool Equals(Struct28 other)
    {
        for (int i = 0; i < elementCount; i++)
            if (elements[i] != other.elements[i])
                return false;
        return true;
    }
    public override bool Equals(object obj)
    {
        return Equals((Struct28)obj);
    }
    public override int GetHashCode()
    {
        var result = new HashCode();
        for (int i = 0; i < elementCount; i++)
            result.Add(elements[i]);
        return result.ToHashCode();
    }
}
