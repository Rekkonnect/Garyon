using Garyon.Attributes;

namespace Garyon.Functions.PointerHelpers;

/// <summary>Provides functions that aid pointer arithmetic.</summary>
[Autogenerated]
public static unsafe class PointerArithmetic
{
    #region Increment
    /// <summary>Increments 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2>(ref T1* p1, ref T2* p2, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 += increment;
        p2 += increment;
    }
    /// <summary>Increments 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
    }
    /// <summary>Increments 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
    }
    /// <summary>Increments 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
    }
    /// <summary>Increments 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
    }
    /// <summary>Increments 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
    }
    /// <summary>Increments 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="p8">The 8th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, int increment = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
        p8 += increment;
    }

    /// <summary>Increments 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2>(ref T1* p1, ref T2* p2, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 += increment;
        p2 += increment;
    }
    /// <summary>Increments 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
    }
    /// <summary>Increments 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
    }
    /// <summary>Increments 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
    }
    /// <summary>Increments 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
    }
    /// <summary>Increments 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
    }
    /// <summary>Increments 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="p8">The 8th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, uint increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
        p8 += increment;
    }

    /// <summary>Increments 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2>(ref T1* p1, ref T2* p2, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 += increment;
        p2 += increment;
    }
    /// <summary>Increments 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
    }
    /// <summary>Increments 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
    }
    /// <summary>Increments 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
    }
    /// <summary>Increments 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
    }
    /// <summary>Increments 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
    }
    /// <summary>Increments 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="p8">The 8th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, long increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
        p8 += increment;
    }

    /// <summary>Increments 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2>(ref T1* p1, ref T2* p2, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 += increment;
        p2 += increment;
    }
    /// <summary>Increments 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
    }
    /// <summary>Increments 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
    }
    /// <summary>Increments 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
    }
    /// <summary>Increments 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
    }
    /// <summary>Increments 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
    }
    /// <summary>Increments 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to increment.</param>
    /// <param name="p2">The 2nd pointer to increment.</param>
    /// <param name="p3">The 3rd pointer to increment.</param>
    /// <param name="p4">The 4th pointer to increment.</param>
    /// <param name="p5">The 5th pointer to increment.</param>
    /// <param name="p6">The 6th pointer to increment.</param>
    /// <param name="p7">The 7th pointer to increment.</param>
    /// <param name="p8">The 8th pointer to increment.</param>
    /// <param name="increment">The amount to increment the pointers by.</param>
    public static void Increment<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, ulong increment)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 += increment;
        p2 += increment;
        p3 += increment;
        p4 += increment;
        p5 += increment;
        p6 += increment;
        p7 += increment;
        p8 += increment;
    }
    #endregion
    
    #region Decrement
    /// <summary>Decrements 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2>(ref T1* p1, ref T2* p2, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
    }
    /// <summary>Decrements 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
    }
    /// <summary>Decrements 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
    }
    /// <summary>Decrements 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
    }
    /// <summary>Decrements 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
    }
    /// <summary>Decrements 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
    }
    /// <summary>Decrements 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="p8">The 8th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, int decrement = 1)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
        p8 -= decrement;
    }

    /// <summary>Decrements 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2>(ref T1* p1, ref T2* p2, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
    }
    /// <summary>Decrements 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
    }
    /// <summary>Decrements 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
    }
    /// <summary>Decrements 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
    }
    /// <summary>Decrements 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
    }
    /// <summary>Decrements 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
    }
    /// <summary>Decrements 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="p8">The 8th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, uint decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
        p8 -= decrement;
    }

    /// <summary>Decrements 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2>(ref T1* p1, ref T2* p2, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
    }
    /// <summary>Decrements 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
    }
    /// <summary>Decrements 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
    }
    /// <summary>Decrements 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
    }
    /// <summary>Decrements 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
    }
    /// <summary>Decrements 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
    }
    /// <summary>Decrements 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="p8">The 8th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, long decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
        p8 -= decrement;
    }

    /// <summary>Decrements 2 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2>(ref T1* p1, ref T2* p2, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
    }
    /// <summary>Decrements 3 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3>(ref T1* p1, ref T2* p2, ref T3* p3, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
    }
    /// <summary>Decrements 4 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
    }
    /// <summary>Decrements 5 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
    }
    /// <summary>Decrements 6 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
    }
    /// <summary>Decrements 7 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
    }
    /// <summary>Decrements 8 pointers by an amount.</summary>
    /// <typeparam name="T1">The 1st type of the pointer.</typeparam>
    /// <typeparam name="T2">The 2nd type of the pointer.</typeparam>
    /// <typeparam name="T3">The 3rd type of the pointer.</typeparam>
    /// <typeparam name="T4">The 4th type of the pointer.</typeparam>
    /// <typeparam name="T5">The 5th type of the pointer.</typeparam>
    /// <typeparam name="T6">The 6th type of the pointer.</typeparam>
    /// <typeparam name="T7">The 7th type of the pointer.</typeparam>
    /// <typeparam name="T8">The 8th type of the pointer.</typeparam>
    /// <param name="p1">The 1st pointer to decrement.</param>
    /// <param name="p2">The 2nd pointer to decrement.</param>
    /// <param name="p3">The 3rd pointer to decrement.</param>
    /// <param name="p4">The 4th pointer to decrement.</param>
    /// <param name="p5">The 5th pointer to decrement.</param>
    /// <param name="p6">The 6th pointer to decrement.</param>
    /// <param name="p7">The 7th pointer to decrement.</param>
    /// <param name="p8">The 8th pointer to decrement.</param>
    /// <param name="decrement">The amount to decrement the pointers by.</param>
    public static void Decrement<T1, T2, T3, T4, T5, T6, T7, T8>(ref T1* p1, ref T2* p2, ref T3* p3, ref T4* p4, ref T5* p5, ref T6* p6, ref T7* p7, ref T8* p8, ulong decrement)
        where T1 : unmanaged
        where T2 : unmanaged
        where T3 : unmanaged
        where T4 : unmanaged
        where T5 : unmanaged
        where T6 : unmanaged
        where T7 : unmanaged
        where T8 : unmanaged
    {
        p1 -= decrement;
        p2 -= decrement;
        p3 -= decrement;
        p4 -= decrement;
        p5 -= decrement;
        p6 -= decrement;
        p7 -= decrement;
        p8 -= decrement;
    }
    #endregion
}