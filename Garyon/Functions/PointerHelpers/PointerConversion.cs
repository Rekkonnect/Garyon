using Garyon.Attributes;
using System.Runtime.CompilerServices;

namespace Garyon.Functions.PointerHelpers;

/// <summary>Provides functions that convert elements of given sequences as pointers.</summary>
[Autogenerated]
public static unsafe class PointerConversion
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ConvertTo<TFrom, TTo>(TFrom* origin, TTo* target, uint length)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        if (typeof(TFrom) == typeof(byte))
        {
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((byte*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((byte*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((byte*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((byte*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((byte*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((byte*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((byte*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((byte*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((byte*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((byte*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((byte*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((byte*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(short))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((short*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((short*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((short*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((short*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((short*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((short*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((short*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((short*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((short*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((short*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((short*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((short*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(int))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((int*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((int*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((int*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((int*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((int*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((int*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((int*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((int*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((int*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((int*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((int*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((int*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(long))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((long*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((long*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((long*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((long*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((long*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((long*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((long*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((long*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((long*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((long*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((long*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((long*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(sbyte))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((sbyte*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((sbyte*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((sbyte*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((sbyte*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((sbyte*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((sbyte*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((sbyte*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((sbyte*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((sbyte*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((sbyte*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((sbyte*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((sbyte*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(ushort))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((ushort*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((ushort*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((ushort*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((ushort*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((ushort*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((ushort*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((ushort*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((ushort*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((ushort*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((ushort*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((ushort*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((ushort*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(uint))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((uint*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((uint*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((uint*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((uint*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((uint*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((uint*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((uint*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((uint*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((uint*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((uint*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((uint*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((uint*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(ulong))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((ulong*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((ulong*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((ulong*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((ulong*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((ulong*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((ulong*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((ulong*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((ulong*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((ulong*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((ulong*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((ulong*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((ulong*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(float))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((float*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((float*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((float*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((float*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((float*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((float*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((float*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((float*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((float*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((float*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((float*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((float*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(double))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((double*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((double*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((double*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((double*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((double*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((double*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((double*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((double*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((double*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((double*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((double*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((double*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(decimal))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((decimal*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((decimal*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((decimal*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((decimal*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((decimal*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((decimal*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((decimal*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((decimal*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((decimal*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((decimal*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((decimal*)origin, (char*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((decimal*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(char))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((char*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((char*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((char*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((char*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((char*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((char*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((char*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((char*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((char*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((char*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((char*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(bool))
                ConvertToBooleanElements((char*)origin, (bool*)target, length);
        }
        if (typeof(TFrom) == typeof(bool))
        {
            if (typeof(TTo) == typeof(byte))
                ConvertToByteElements((bool*)origin, (byte*)target, length);
            if (typeof(TTo) == typeof(short))
                ConvertToInt16Elements((bool*)origin, (short*)target, length);
            if (typeof(TTo) == typeof(int))
                ConvertToInt32Elements((bool*)origin, (int*)target, length);
            if (typeof(TTo) == typeof(long))
                ConvertToInt64Elements((bool*)origin, (long*)target, length);
            if (typeof(TTo) == typeof(sbyte))
                ConvertToSByteElements((bool*)origin, (sbyte*)target, length);
            if (typeof(TTo) == typeof(ushort))
                ConvertToUInt16Elements((bool*)origin, (ushort*)target, length);
            if (typeof(TTo) == typeof(uint))
                ConvertToUInt32Elements((bool*)origin, (uint*)target, length);
            if (typeof(TTo) == typeof(ulong))
                ConvertToUInt64Elements((bool*)origin, (ulong*)target, length);
            if (typeof(TTo) == typeof(float))
                ConvertToSingleElements((bool*)origin, (float*)target, length);
            if (typeof(TTo) == typeof(double))
                ConvertToDoubleElements((bool*)origin, (double*)target, length);
            if (typeof(TTo) == typeof(decimal))
                ConvertToDecimalElements((bool*)origin, (decimal*)target, length);
            if (typeof(TTo) == typeof(char))
                ConvertToCharElements((bool*)origin, (char*)target, length);
        }
    }

    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void CopyElements<T>(T* origin, T* target, uint length)
        where T : unmanaged
    {
        uint bytes = (uint)(length * sizeof(T));
        Copy64BitChunks((long*)origin, (long*)target, bytes / sizeof(long));
        CopyRemainingBytes((byte*)origin, (byte*)target, bytes);
    }
    private static void Copy64BitChunks(long* origin, long* target, uint chunks)
    {
        for (uint i = 0; i < chunks; i++)
            target[i] = origin[i];
    }
    private static void CopyRemainingBytes(byte* origin, byte* target, uint length)
    {
        uint index = length / sizeof(long);
        uint remainder = length % sizeof(long);

        Store<int>(origin, target, ref index, remainder);
        Store<short>(origin, target, ref index, remainder);
        Store<byte>(origin, target, ref index, remainder);

        static void Store<T>(byte* origin, byte* target, ref uint index, uint remainder)
            where T : unmanaged
        {
            if ((remainder & sizeof(T)) > 0)
            {
                ((T*)origin)[index] = ((T*)target)[index];
                index += (uint)sizeof(T);
            }
        }
    }

    #region Byte* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(byte* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(byte* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(byte* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(byte* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(byte* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(byte* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(byte* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(byte* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(byte* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(byte* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(byte* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="byte"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="byte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(byte* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Int16* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(short* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(short* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(short* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(short* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(short* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(short* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(short* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(short* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(short* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(short* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(short* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="short"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="short"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(short* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Int32* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(int* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(int* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(int* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(int* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(int* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(int* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(int* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(int* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(int* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(int* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(int* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="int"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="int"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(int* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Int64* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(long* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(long* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(long* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(long* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(long* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(long* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(long* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(long* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(long* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(long* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(long* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="long"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="long"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(long* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region SByte* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(sbyte* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(sbyte* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(sbyte* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(sbyte* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(sbyte* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(sbyte* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(sbyte* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(sbyte* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(sbyte* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(sbyte* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(sbyte* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="sbyte"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="sbyte"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(sbyte* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region UInt16* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(ushort* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(ushort* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(ushort* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(ushort* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(ushort* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(ushort* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(ushort* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(ushort* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(ushort* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(ushort* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(ushort* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ushort"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ushort"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(ushort* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region UInt32* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(uint* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(uint* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(uint* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(uint* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(uint* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(uint* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(uint* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(uint* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(uint* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(uint* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(uint* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="uint"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="uint"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(uint* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region UInt64* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(ulong* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(ulong* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(ulong* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(ulong* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(ulong* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(ulong* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(ulong* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(ulong* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(ulong* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(ulong* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(ulong* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="ulong"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="ulong"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(ulong* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Single* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(float* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(float* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(float* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(float* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(float* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(float* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(float* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(float* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(float* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(float* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(float* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="float"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="float"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(float* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Double* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(double* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(double* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(double* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(double* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(double* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(double* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(double* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(double* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(double* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(double* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(double* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="double"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="double"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(double* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Decimal* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(decimal* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(decimal* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(decimal* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(decimal* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(decimal* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(decimal* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(decimal* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(decimal* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(decimal* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(decimal* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(decimal* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="decimal"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="decimal"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(decimal* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Char* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(char* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(char* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(char* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(char* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(char* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(char* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(char* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(char* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(char* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(char* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(char* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)origin[i];
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="char"/>* to elements of <seealso cref="bool"/> stored in a given sequence as a <seealso cref="bool"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="char"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="bool"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToBooleanElements(char* origin, bool* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = origin[i] != 0;
    }
    #endregion
    
    #region Boolean* -> T*
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="byte"/> stored in a given sequence as a <seealso cref="byte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="byte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToByteElements(bool* origin, byte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (byte)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="short"/> stored in a given sequence as a <seealso cref="short"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="short"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt16Elements(bool* origin, short* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (short)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="int"/> stored in a given sequence as a <seealso cref="int"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="int"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt32Elements(bool* origin, int* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (int)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="long"/> stored in a given sequence as a <seealso cref="long"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="long"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToInt64Elements(bool* origin, long* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (long)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="sbyte"/> stored in a given sequence as a <seealso cref="sbyte"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="sbyte"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSByteElements(bool* origin, sbyte* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (sbyte)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="ushort"/> stored in a given sequence as a <seealso cref="ushort"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ushort"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt16Elements(bool* origin, ushort* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ushort)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="uint"/> stored in a given sequence as a <seealso cref="uint"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="uint"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt32Elements(bool* origin, uint* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (uint)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="ulong"/> stored in a given sequence as a <seealso cref="ulong"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="ulong"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToUInt64Elements(bool* origin, ulong* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (ulong)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="float"/> stored in a given sequence as a <seealso cref="float"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="float"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToSingleElements(bool* origin, float* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (float)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="double"/> stored in a given sequence as a <seealso cref="double"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="double"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDoubleElements(bool* origin, double* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (double)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="decimal"/> stored in a given sequence as a <seealso cref="decimal"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="decimal"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToDecimalElements(bool* origin, decimal* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (decimal)(origin[i] ? 1 : 0);
    }
    /// <summary>Converts a number of elements from a sequence given as a <seealso cref="bool"/>* to elements of <seealso cref="char"/> stored in a given sequence as a <seealso cref="char"/>*.</summary>
    /// <param name="origin">The origin sequence as a <seealso cref="bool"/>* whose elements to convert.</param>
    /// <param name="target">The target sequence as a <seealso cref="char"/>* that will contain the converted elements.</param>
    /// <param name="length">The length of both sequences.</param>
    public static void ConvertToCharElements(bool* origin, char* target, uint length)
    {
        for (uint i = 0; i < length; i++)
            target[i] = (char)(origin[i] ? 1 : 0);
    }
    #endregion
}