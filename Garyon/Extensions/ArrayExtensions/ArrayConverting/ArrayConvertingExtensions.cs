using Garyon.Attributes;
using Garyon.Functions.PointerHelpers;
using System;
using System.Runtime.CompilerServices;

namespace Garyon.Extensions.ArrayExtensions.ArrayConverting;

/// <summary>Provides extensions for converting an array's values and creating a new array containing the results.</summary>
public static class ArrayConvertingExtensions
{
    #region Copy
    /// <summary>Copies all the elements of the array to a new array by using hardware acceleration for direct byte copy and returns the resulting array. If the provided target array's length is less than the original one's, it will be filled with the first elements of the original array.</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="origin">The original array whose elements to copy.</param>
    /// <param name="target">The target array that will contain the copied elements.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static unsafe T[] CopyAccelerated<T>(this T[] origin, T[] target)
        where T : unmanaged
    {
        uint length = (uint)Math.Min(origin.Length, target.Length);

        fixed (T* o = origin)
        fixed (T* t = target)
            CopyTo(o, t, length);

        return target;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[] to a new <typeparamref name="T"/>[] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static unsafe T[] CopyAccelerated<T>(this T[] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var result = new T[length];

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    #region Autogenerated
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,] to a new <typeparamref name="T"/>[,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,] CopyAccelerated<T>(this T[,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,] to a new <typeparamref name="T"/>[,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,] CopyAccelerated<T>(this T[,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,] to a new <typeparamref name="T"/>[,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,] CopyAccelerated<T>(this T[,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,] to a new <typeparamref name="T"/>[,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,] CopyAccelerated<T>(this T[,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,] to a new <typeparamref name="T"/>[,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,] CopyAccelerated<T>(this T[,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,] to a new <typeparamref name="T"/>[,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,] CopyAccelerated<T>(this T[,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the elements of the <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] by using hardware acceleration for direct byte copy and returns the resulting <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="T">The type of the elements in the array.</typeparam>
    /// <param name="a">The <typeparamref name="T"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyAccelerated<T>(this T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where T : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (T[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(T), lengths);

        fixed (T* origin = a)
        fixed (T* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    #endregion
    #endregion

    #region CopyToNumericalArray
    // Behold 32 overloads for each possible array rank that does not crash the compiler, I feel sorry for you
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[] to a new <typeparamref name="TTo"/>[] and returns the <typeparamref name="TTo"/>[].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static unsafe TTo[] CopyToNumericalArray<TFrom, TTo>(this TFrom[] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var result = new TTo[length];

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    #region Autogenerated
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,] to a new <typeparamref name="TTo"/>[,] and returns the <typeparamref name="TTo"/>[,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,] to a new <typeparamref name="TTo"/>[,,] and returns the <typeparamref name="TTo"/>[,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,] and returns the <typeparamref name="TTo"/>[,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,] to a new <typeparamref name="TTo"/>[,,,,] and returns the <typeparamref name="TTo"/>[,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,] to a new <typeparamref name="TTo"/>[,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
    /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
    /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
    /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
    /// <returns>The resulting array.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [Autogenerated]
    public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
        uint length = (uint)a.Length;
        var lengths = a.GetDimensionLengths();
        var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

        fixed (TFrom* origin = a)
        fixed (TTo* target = result)
            CopyTo(origin, target, length);

        return result;
    }
    #endregion
    #endregion

    private static unsafe void CopyTo<TFrom, TTo>(TFrom* origin, TTo* target, uint length)
        where TFrom : unmanaged
        where TTo : unmanaged
    {
#if HAS_INTRINSICS
        if (SIMDPointerConversion.CopyToArrayVector128(origin, target, length))
            return;

        if (SIMDPointerConversion.CopyToArrayVector128(origin, target, length))
            return;
#endif

        PointerConversion.ConvertTo(origin, target, length);
    }
}
