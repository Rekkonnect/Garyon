using Garyon.Attributes;

namespace Garyon.Objects
{
    /************************************ NOTE ************************************
     * Aside from the inability to call base implementations of a function        *
     * within the interface, it is also avoided, since otherwise,                 *
     * in GetValueAtIndex, there would be up to N - 1 recursive base method calls *
     * unless Roslyn would be capable of optimizing this                          *
     ******************************************************************************/

    /// <summary>Represents a union containing a value that can be represented as any of 2 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    public interface IUnion<T1, T2>
        : IUnion
    {
        int IUnion.DistinctTypeCount => 2;

        /// <summary>Gets the value in the union represented as one of the 1st specified type.</summary>
        public T1 Value1 { get; }
        /// <summary>Gets the value in the union represented as one of the 2nd specified type.</summary>
        public T2 Value2 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 3 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3>
        : IUnion<T1, T2>
    {
        int IUnion.DistinctTypeCount => 3;

        /// <summary>Gets the value in the union represented as one of the 3rd specified type.</summary>
        public T3 Value3 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 4 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4>
        : IUnion<T1, T2, T3>
    {
        int IUnion.DistinctTypeCount => 4;

        /// <summary>Gets the value in the union represented as one of the 4th specified type.</summary>
        public T4 Value4 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 5 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5>
        : IUnion<T1, T2, T3, T4>
    {
        int IUnion.DistinctTypeCount => 5;

        /// <summary>Gets the value in the union represented as one of the 5th specified type.</summary>
        public T5 Value5 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 6 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6>
        : IUnion<T1, T2, T3, T4, T5>
    {
        int IUnion.DistinctTypeCount => 6;

        /// <summary>Gets the value in the union represented as one of the 6th specified type.</summary>
        public T6 Value6 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 7 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7>
        : IUnion<T1, T2, T3, T4, T5, T6>
    {
        int IUnion.DistinctTypeCount => 7;

        /// <summary>Gets the value in the union represented as one of the 7th specified type.</summary>
        public T7 Value7 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 8 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8>
        : IUnion<T1, T2, T3, T4, T5, T6, T7>
    {
        int IUnion.DistinctTypeCount => 8;

        /// <summary>Gets the value in the union represented as one of the 8th specified type.</summary>
        public T8 Value8 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 9 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8>
    {
        int IUnion.DistinctTypeCount => 9;

        /// <summary>Gets the value in the union represented as one of the 9th specified type.</summary>
        public T9 Value9 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 10 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9>
    {
        int IUnion.DistinctTypeCount => 10;

        /// <summary>Gets the value in the union represented as one of the 10th specified type.</summary>
        public T10 Value10 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 11 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
    {
        int IUnion.DistinctTypeCount => 11;

        /// <summary>Gets the value in the union represented as one of the 11th specified type.</summary>
        public T11 Value11 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 12 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    /// <typeparam name="T12">The 12th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
    {
        int IUnion.DistinctTypeCount => 12;

        /// <summary>Gets the value in the union represented as one of the 12th specified type.</summary>
        public T12 Value12 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                12 => Value12,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 13 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    /// <typeparam name="T12">The 12th type that the value may be represented as.</typeparam>
    /// <typeparam name="T13">The 13th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
    {
        int IUnion.DistinctTypeCount => 13;

        /// <summary>Gets the value in the union represented as one of the 13th specified type.</summary>
        public T13 Value13 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                12 => Value12,
                13 => Value13,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 14 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    /// <typeparam name="T12">The 12th type that the value may be represented as.</typeparam>
    /// <typeparam name="T13">The 13th type that the value may be represented as.</typeparam>
    /// <typeparam name="T14">The 14th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
    {
        int IUnion.DistinctTypeCount => 14;

        /// <summary>Gets the value in the union represented as one of the 14th specified type.</summary>
        public T14 Value14 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                12 => Value12,
                13 => Value13,
                14 => Value14,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 15 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    /// <typeparam name="T12">The 12th type that the value may be represented as.</typeparam>
    /// <typeparam name="T13">The 13th type that the value may be represented as.</typeparam>
    /// <typeparam name="T14">The 14th type that the value may be represented as.</typeparam>
    /// <typeparam name="T15">The 15th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
    {
        int IUnion.DistinctTypeCount => 15;

        /// <summary>Gets the value in the union represented as one of the 15th specified type.</summary>
        public T15 Value15 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                12 => Value12,
                13 => Value13,
                14 => Value14,
                15 => Value15,
                _ => null,
            };
        }
    }

    /// <summary>Represents a union containing a value that can be represented as any of 16 distinct types.</summary>
    /// <typeparam name="T1">The 1st type that the value may be represented as.</typeparam>
    /// <typeparam name="T2">The 2nd type that the value may be represented as.</typeparam>
    /// <typeparam name="T3">The 3rd type that the value may be represented as.</typeparam>
    /// <typeparam name="T4">The 4th type that the value may be represented as.</typeparam>
    /// <typeparam name="T5">The 5th type that the value may be represented as.</typeparam>
    /// <typeparam name="T6">The 6th type that the value may be represented as.</typeparam>
    /// <typeparam name="T7">The 7th type that the value may be represented as.</typeparam>
    /// <typeparam name="T8">The 8th type that the value may be represented as.</typeparam>
    /// <typeparam name="T9">The 9th type that the value may be represented as.</typeparam>
    /// <typeparam name="T10">The 10th type that the value may be represented as.</typeparam>
    /// <typeparam name="T11">The 11th type that the value may be represented as.</typeparam>
    /// <typeparam name="T12">The 12th type that the value may be represented as.</typeparam>
    /// <typeparam name="T13">The 13th type that the value may be represented as.</typeparam>
    /// <typeparam name="T14">The 14th type that the value may be represented as.</typeparam>
    /// <typeparam name="T15">The 15th type that the value may be represented as.</typeparam>
    /// <typeparam name="T16">The 16th type that the value may be represented as.</typeparam>
    [Autogenerated]
    public interface IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        : IUnion<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
    {
        int IUnion.DistinctTypeCount => 16;

        /// <summary>Gets the value in the union represented as one of the 16th specified type.</summary>
        public T16 Value16 { get; }

        object? IUnion.GetValueAtIndex(int index)
        {
            return index switch
            {
                1 => Value1,
                2 => Value2,
                3 => Value3,
                4 => Value4,
                5 => Value5,
                6 => Value6,
                7 => Value7,
                8 => Value8,
                9 => Value9,
                10 => Value10,
                11 => Value11,
                12 => Value12,
                13 => Value13,
                14 => Value14,
                15 => Value15,
                16 => Value16,
                _ => null,
            };
        }
    }
}
